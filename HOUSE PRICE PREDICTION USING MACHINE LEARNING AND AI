!pip install pandas numpy seaborn matplotlib  #[RUN]
 #[OUTPUT]
 Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)
 Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)
 Requirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (0.13.2)
 Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)
 Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)
 Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)
 Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)
 Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)
 Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)
 Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.57.0)
 Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)
 Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)
 Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)
 Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)
 Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)


 #[RUN]
 import pandas as pd
 import numpy as np

 # Random seed for reproducibility
 np.random.seed(42)

 # Generate 100 samples
 data = pd.DataFrame({
 'SquareFeet': np.random.randint(500, 3500, 100),
 'Bedrooms': np.random.randint(1, 6, 100),
 'Bathrooms': np.random.randint(1, 4, 100),
 'LocationScore': np.random.randint(1, 11, 100), # Location quality score from 1 to 10
 })

 # Generate Prices (basic formula + randomness)
 data['Price'] = (
 data['SquareFeet'] 
* 
data['Bedrooms'] 
data['Bathrooms'] 
data['LocationScore'] 
)

print(data.head())

 from sklearn.model_selection import train_test_split
 from sklearn.linear_model import LinearRegression
 from sklearn.metrics import mean_squared_error, r2_score
 import matplotlib.pyplot as plt

X = data[['SquareFeet', 'Bedrooms', 'Bathrooms', 'LocationScore']] # Features
 y = data['Price'] # Target

X_train, X_test, y_train, y_test = train_test_split(
 X, y, test_size=0.2, random_state=42)
 model = LinearRegression()
 model.fit(X_train, y_train)

 y_pred = model.predict(X_test)

 # Evaluation
 rmse = np.sqrt(mean_squared_error(y_test, y_pred))
 r2 = r2_score(y_test, y_pred)

 print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
 print(f"RÂ² Score: {r2:.2f}")

 plt.figure(figsize=(8,6))
 plt.scatter(y_test, y_pred, alpha=0.7, color='blue')
 plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
 plt.xlabel('Actual Price')
 plt.ylabel('Predicted Price')
 plt.title('Actual vs Predicted House Prices')
 plt.show()

#[OUTPUT]

OUTPUT IN THE NEXT FILE
